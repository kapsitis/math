"Week","Id","Key","Value"
"W1",1,"topic","Use Statements and Propositions."
"W1",1.1,"task","Analyze Propositions and Boolean Expressions"
"W1",1.1,"description","This subsection should introduce all 5 Boolean connectors ($\neg$, $\wedge$, $\vee$, $\rightarrow$, $\leftrightarrow$), their truth tables."
"W1",1.1,"reading","Ch01P1 (Rosen2019, p.1-13) Propositional Logic"
"W1",1.1,"video","https://youtu.be/OApHaIMKMJE (Brehm2018_1_1) Propositional Logic"
"W1","1.1.1","task","Define what is a proposition"
"W1","1.1.1","description","Mention non-proposition sentences, include trickier situations (contradictory self-referential statements)"
"W1","1.1.2","task","Define Boolean operations ($\neg, \wedge, \vee, \rightarrow, \leftrightarrow$)"
"W1","1.1.2","description","Define Boolean operations through its natural language equivalent and its truth table."
"W1","1.1.3","task","Create truth tables for expressions"
"W1","1.1.3","description","Show how to evaluate expressions starting from subexpressions by plugging in the True/False values."
"W1","1.1.4","task","Introduce the formal concepts of precedence and associativity."
"W1","1.1.4","description","Explain that power operation ($2^{3^4}$) as well as the logical implication ($A \rightarrow B \rightarrow C$) are right-associative - they group from the right to the left. "
"W1","1.1.5","task","Restore parentheses in a Boolean expression using precedence (e.g. negation has the highest priority, conjunction is done before disjunction). Draw syntax trees showing evaluation order."
"W1","1.1.5","description","Show that Boolean expressions is one specific case of expressions (along with arithmetic, polynomials, etc.) May also illustrate precedence (arithmetic, comparisons, Booleans) in some programming language."
"W1",1.2,"task","Create propositional statements"
"W1",1.2,"description","Solve some word problems with propositional logic. We should pay special attention to cases where the connectors can be misunderstood or their everyday meaning differs from the formal one."
"W1",1.2,"reading","Ch01P2 (Rosen2019, p.17-22) Applications of Propositional Logic"
"W1",1.2,"video","https://youtu.be/_RrxqiB_pfE (Brehm2018_1_2) Applications of Propositional Logic"
"W1","1.2.1","task","Translate English into Propositional logic."
"W1","1.2.1","description","Given a statement in English and atomic propositions, write its Boolean expression."
"W1","1.2.2","task","Recognize situations when natural language uses logical connectives in a different sense."
"W1","1.2.2","description","Analyze phrases expressing inclusive and exclusive OR; various ways to express implications (“sufficient”, “necessary”, “whenever”, “if”, “only if”, “if and only if”)"
"W1","1.2.3","task","Solve Logic Puzzles and Word Problems based on propositional logic"
"W1","1.2.3","description","Use case analysis and other simple methods to establish truth values of propositions, if some incomplete information about the situation is given. "
"W1","1.2.4","task","Use Boolean expressions in programming. "
"W1","1.2.4","description","Apply short-circuit Boolean evaluation in some programming language such as Python. Lazy and eager evaluation (and distinguishing them by side-effects). Explain how ""if” statements differ from implications in propositional calculus."
"W1",1.3,"task","Identify tautologies, contradictions and satisfiable expressions"
"W1",1.3,"description","Perform equivalent transformations of Boolean expressions (here we use equivalences not as Boolean connectors that may sometimes return “False”, but as a way to write Boolean identities that are universaly true). 
Also solve satisfiablility of Boolean problems in a more general sense - even when they are not equivalences."
"W1",1.3,"reading","Ch01P3 (Rosen2019, p.26-33) Propositional Equivalences"
"W1",1.3,"video","https://youtu.be/x0ELYvaf21E (Brehm2018_1_3) Propositional Equivalences"
"W1","1.3.1","task","Check tautologies using truth tables"
"W1","1.3.1","description","Tasks may include other manipulations on truth tables (building jus the ""interesting"" parts of tables; finding which values must take certain values)"
"W1","1.3.2","task","Rewrite propositions using equivalences "
"W1","1.3.2","description","Simplify Boolean statements using Boolean identities (double negation; De Morgan's laws; Contrapositive for an Implication; distributive laws and so on)"
"W1","1.3.3","task","Identify tautologies, satisfiable statements and contradictions"
"W1","1.3.3","description","Describe tautologies, satisfiable expressions and contradictions in terms of truth tables. Prove or disprove Boolean tautologies; check satisfiability of Boolean expressions. In all these situations try to pare down the truth tables to find ""interesting"" subcases to check (get used to avoid mechanistical approach to verify all 2^n rows in a truth table as this would be error-prone and slow)."
"W1","1.3.4","task","Create new tautologies from existing ones using inference rules."
"W1","1.3.4","description","Use syllogisms like Modus Ponens and other inference rules to derive logical formulas."
"W1","1.3.5","task","Convert every Boolean expression to its CNF and DNF"
"W1","1.3.5","description","Use truth table to construct CNF or DNF; make it shorter by combining similar terms."
"W1","1.3.6","task","Draw a Boolean circuit, try to use limited number of elements."
"W1","1.3.6","description","Draw Boolean circuits where you are allowed to reuse the same subexpression output in multiple inputs."
"W1",1.4,"task","Use Predicates and Quantifiers"
"W1",1.4,"description","This subsection introduces predicates as expressions depending on variables and ""naive"" concept of quantifiers (universal quantifier is just a long conjunction; existential quantifier is just a long disjunction)"
"W1",1.4,"reading","Ch1P4 (Rosen2019, p.40-55) Predicates and Quantifiers"
"W1",1.4,"video","https://youtu.be/rZH5RFSXsvI (Brehm2018_1_4) Predicates and Quantifiers"
"W1","1.4.1","task","Define a predicate as a function to booleans."
"W1","1.4.1","description","Interpret commonly known math concepts (inequalities, relations in geometry) as predicates."
"W1","1.4.2","task","Analyze syntax and restore parentheses in quantifier expressions."
"W1","1.4.2","description","Draw syntax trees, define scopes of variables, recognize free and bound variables."
"W1","1.4.3","task","Interpret quantifiers over finite domains as long conjunction ($\forall$) or long disjunction ($\exists$)"
"W1","1.4.3","description","Given value table for some predicate on a finite domain, evaluate quantifier expressions. "
"W1","1.4.4","task","Check the syntax in quantifier expressions"
"W1","1.4.4","description","Use precedence rules, restore parentheses, avoid ambiguities with set domains. "
"W1","1.4.5","task","Apply simple manipulations to predicate/quantifier expressions (apply negations, rename variables, apply other tautologies)."
"W1","1.4.5","description","Negate predicates applying De Morgan's laws. "
,,,
,,,
,,,
"W2",1.5,"task","Use Nested Quantifiers"
"W2",1.5,"description","This section does not cover much new material; it is useful as a reminder - how to use the first order logic to explain everyday situations."
"W2",1.5,"reading","Ch01P5 (Rosen2019, p.60-68) Nested Quantifiers"
"W2",1.5,"video","https://youtu.be/xDaBIVPyvDQ (Brehm2018_1_5_2) Translating with Nested Quantifiers"
"W2","1.5.1","task","Rewrite English sentences and mathematical statements with nested quantifiers."
"W1","1.5.1","description","Formalize English sentences and some mathematical statements into propositional logic and simple (1st order; no more than 2 nesting levels) predicate calculus."
"W2","1.5.2","task","Interpret quantifier expressions in human language (Show the difference between ""For every person there exists a father"" vs. ""There exists a father for everyone"")"
"W2","1.5.3","task","Negate multiple quantifiers using De Morgan's laws and other equivalence rules.Evaluate Boolean expressions (and also predicate/quantifier expressions over simple or finite sets). May need to introduce simple relations (square tables with True/False) to illustrate how predicates/quantifiers operate."
"W2","1.5.4","task","Rewrite popular mathematical concepts (divisibility, being a prime number, monotonicity, boundedness, continuity, existence of a limit, existence of a derivative) with predicates and quantifiers"
"W2",1.6,"task","Use Rules of Inference"
"W2",1.6,"description","This section is meant to introduce some Aristotelian and other traditional logic reasoning (modus ponens, substitution, etc.) and other rules of inference. Only simple cases are shown; we do not show the tricky cases of inference; do not differentiate between constructive and non-constructive logic at this point."
"W2",1.6,"reading","Ch01P6 (Rosen2019, p.73-82) Rules of Inference"
"W2",1.6,"reading","https://bit.ly/3rFbcEo (Knepley2020, p.12-20) SUNY Buffalo, CSE191 Notes."
"W2",1.6,"video","https://youtu.be/oasIqX74Mhc (Brehm2020_1_6_1) Rules of Inference for Propositional Logic"
"W2",1.6,"video","https://youtu.be/zMtToQelLN8 (Brehm2020_1_6_2) Rules of Inference for Quantified Statements"
"W2","1.6.1","task","Recognize hypotheses and goals in a proof."
"W2","1.6.2","task","Apply modus ponens: $A \rightarrow B,\, A \;\vdash\; B$"
"W2","1.6.3","task","Apply modus tollens: $A \rightarrow B,\, (\neg B) \;\vdash\; (\neg A)$"
"W2","1.6.4","task","Apply transitivity: $A \rightarrow B,\, B \rightarrow C \;\vdash\; A \rightarrow C$"
"W2","1.6.5","task","Apply disjunctive syllogism: $A \vee B,\, \neg A \;\vdash\; B$"
"W2","1.6.6","task","Apply ""addition"": $A \;\vdash\; A \vee B$"
"W2","1.6.7","task","Apply ""simplification"": $(A \wedge B) \;\vdash\; A$"
"W2","1.6.8","task","Apply ""conjunction"": $A,\, B \;\vdash\; (A \wedge B)$"
"W2","1.6.9","task","Apply ""resolution"": $(A \vee B),\, (\neg A \vee C) \;\vdash\; (B \vee C)$"
"W2",1.7,"task","Use Common Proof Strategies"
"W2",1.7,"description","This subsection should introduce the basics of human-readable proofs with simple logical structure (and without overly complicated mathematics). We illustrate IF-THEN and IF-AND-ONLY-IF types of statements with results from elementary geometry, algebra, number theory or real analysis. (It is highly desirable to choose examples that may be familiar to the participants.)"
"W2",1.7,"reading","Ch01P7 (Rosen2019, p.84-93) Introduction to Proofs"
"W2",1.7,"video","https://youtu.be/b-hKQOhxlNA (Brehm2018_1_7_1) Direct Proof"
"W2",1.7,"video","https://youtu.be/PNme9Kl3kDo (Brehm2018_1_7_2) Proof by Contraposition"
"W2",1.7,"video","https://youtu.be/CCAgvPGOlmE (Brehm2018_1_7_3) Proof by Contradiction"
"W2","1.7.1","task","Explain direct proofs for IF-THEN statements"
"W2","1.7.2","task","Explain proofs by contraposition for IF-THEN statements"
"W2","1.7.3","task","Explain constructive proofs by contradiction (e.g. non-existence). Simple examples that show how proofs by contradiction do not need to rely on the classical logic (such as the Law of Excluded Middle)"
"W2",1.8,"task","Use More Proof Strategies"
"W2",1.8,"description","Introduce proof techniques that reflect simple logical structure of the statement (for example analyzing cases would mean a generalization/universal quantifier over some finite set of cases; "
"W2",1.8,"reading","Ch01P8 (Rosen2019, p.96-113) Proof Methods and Strategy"
"W2",1.8,"reading","https://bit.ly/3n2OulP (Nahas2019) Nahas Tutorial"
"W2",1.8,"video","https://youtu.be/dheuJkuSNyI (Brehm2020_1_8_1) Proof by Cases"
"W2",1.8,"video","https://youtu.be/uNbt-ABKpj4 (Brehm2020_1_8_2) Proofs of Existence And Uniqueness"
"W2","1.8.1","task","Explain proofs by analyzing cases."
"W2","1.8.2","task","Explain proofs by counterexamples."
"W2","1.8.3","task","Introduce ""without loss of generality"" clauses."
"W2","1.8.4","task","Explain nonconstructive proofs by contradiction (e.g. existence). Game analysis by ""mirroring strategy"" and other proofs that look somewhat like cheating, but are actually correct. Why the Law of Excluded Middle is necessary in such cases. "
"W2","1.8.7","objective","Create simple human-readable proofs by cases/by exhaustion. "
"W2","1.8.8","objective","Create simple human-readable proofs ""by contradiction""."
"W2","1.8.9","objective","Distinguish one-way (implication) proofs and two-way (equivalence) proofs."
"W2","1.8.10","objective","Distinguish universal statements (about every element in some set) and the counterexample proofs (refute a universal statement by some unusual example)."
,,,
,,,
,,,
"W3",2,"topic","Define Sets, Functions, their Set-Level Properties"
"W3",2.1,"task","Manipulate Sets and Functions"
"W3",2.1,"description","This subsection only cares about set notation, defining new sets via subset and tuple (pair, tripple, etc.) constructions."
"W3",2.1,"reading","Ch02P1 (Rosen2019, p.121-131) Sets"
"W3",2.1,"video","https://youtu.be/jXxuwrAbpCU (Brehm2018_2_1_2) More about Sets"
"W3","2.1.1","task","Define set by listing elements or intervals."
"W3","2.1.2","task","Define set by defining a predicate."
"W3","2.1.3","task","Define subsets, proper subsets."
"W3","2.1.4","task","Define pairs and other n-tuples."
"W3","2.1.5","task","Define power sets."
"W3","2.1.6","task","Reproduce Russel's paradox and retell it in some situations."
"W3","2.1.7","task","Demonstrate how predicate logic statements depend on the set used as the domain for quantifiers."
"W3",2.2,"task","Manipulate sets over some universe"
"W3",2.2,"description","This subsection is a refresher of the Boolean operations, since set operations for a given universe closely resemble Boolean operations (set intersection is same as conjunction, etc.)"
"W3",2.2,"reading","Ch02P2 (Rosen2019, p.133-144) Set Operations"
"W3",2.2,"video","https://youtu.be/ceQmwJ0xGrQ (Brehm2020_2_2_1) Operations on Sets"
"W3",2.2,"video","https://youtu.be/ReV1lwBw_lc (Brehm2020_2_2_2) Set Identities"
"W3",2.2,"video","https://youtu.be/tRknuaNSlrU (Brehm2020_2_2_3) Proving Set Identities"
"W3","2.2.1","task","Define the union of two or more sets."
"W3","2.2.2","task","Define the intersection of two or more sets."
"W3","2.2.3","task","Define the complement of a set."
"W3","2.2.4","task","Define the difference of two sets."
"W3","2.2.5","task","Define the symmetric difference of sets."
"W3","2.2.6","task","Draw Venn diagrams for 2, 3, 4 sets. "
"W3","2.2.7","task","Draw Euler diagrams (where some subset relations are known - so you do not show all the $2^n$ theoretically possible regions as in a Venn diagram)."
"W3",2.3,"task","Define functions and their set-related properties"
"W3",2.3,"description","Nearly every topic in mathematics is somehow related to functions; here we only explain some set-theoretical properties of functions - defining domain, range, some properties (one-to-one, onto, bijection), also inverse and composition of two or more functions. "
"W3",2.3,"reading","Ch02P3 (Rosen2019, p.147-161) Functions"
"W3",2.3,"video","https://youtu.be/BaaC0IOkfWI (Brehm2020_2_3_1) Introduction to Functions"
"W3",2.3,"video","https://youtu.be/plSzGYwo-ew (Brehm2020_2_3_2) One to One and Onto Functions"
"W3",2.3,"video","https://youtu.be/aQefXelCN5Y (Brehm2020_2_3_3) Inverse Functions and Composition of Functions"
"W3",2.3,"video","https://youtu.be/_a9veRNS78w (Brehm2020_2_3_4) Useful Functions to Know"
"W3","2.3.1","task","Describe the domain and the range (codomain) of a function."
"W3","2.3.2","task","Describe the one-to-one, onto and bijective (i.e. one-to-one AND onto) properties of a function. "
"W3","2.3.3","task","Find inverse functions for some known function examples"
"W3","2.3.4","task","Find composition of multiple functions."
"W3","2.3.5","objective","Create proofs showing that some 2 sets are different (find a conterexample or use some non-constructive approach)."
"W3","2.3.6","objective","Explain proofs for a function being bijective or injective. "
"W3","2.3.7","objective","Explain proofs and constructions by selecting an extreme element in a set."
"W3","2.3.8","objective","Use set notation with a predicate (create a subset of a given set - all elements satisfying some property); use set notation for n-tuples, for finite sequences. "
"W3","2.3.9","objective","Use function and set notation to describe functions with the given domain and range; use the notation of an inverse function $f^{-1}$ and the composition of two functions. Also the image and the inverse image of some set w.r.t. some function. "
,,,
,,,
,,,
"W4",2.4,"task","Define and use sequences"
"W4",2.4,"description","This subsection introduces simple sequences and also notation (long sums, products, Boolean operations, set unions/intersections) to manipulate them."
"W4",2.4,"reading","Ch2P4 (Rosen2019, p.179-186) Sequences and Summations"
"W4",2.4,"video","https://youtu.be/x2Ul4NtyoHw (Brehm2020_2_4_1) Introduction to Sequences"
"W4",2.4,"video","https://youtu.be/QaAQ-bKCUME (Brehm2020_2_4_2) Recurrence Relations"
"W4",2.4,"video","https://youtu.be/w9zIex42wnY (Brehm2020_2_4_3) Summations and Sigma Notation"
"W4",2.4,"video","https://youtu.be/Zi2sLtCO44A (Brehm2020_2_4_4) Summation Properties and Formulas"
"W4","2.4.1","task","Define sequences as functions from natural numbers to something"
"W4","2.4.2","task","Define recurrent sequences"
"W4","2.4.2","task","Define long sums and similar looping constructs"
"W4",2.5,"task","Compare Set Cardinalities"
"W4",2.5,"description","This subsection discusses comparing sizes of two sets; it is essential to develop intuition on which problems can be formalized and which ones are algorithmically solvable."
"W4",2.5,"reading","Ch02P5 (Rosen2019, p.179-186) Cardinality of Sets"
"W4",2.5,"video","https://youtu.be/WQWkG9cQ8NQ (Bazett2018) Integers and Rationals are both infinite but is it the SAME infinity?"
"W4","2.5.1","task","Define injective functions between 2 sets."
"W4","2.5.2","task","Define surjective functions between 2 sets."
"W4","2.5.3","task","Prove that adding finitely many elements to a countable set is countable"
"W4","2.5.4","task","Prove that the union of two countable sets is countable"
"W4","2.5.5","task","Prove that the union of countably many countable sets is countable"
"W4","2.5.6","task","Prove that the powerset of any set is larger than the original set"
"W4","2.5.7","task","Prove statements about subsets, functions, sequences in the set of integers"
"W4","2.5.8","task","Set cardinality results in geometry (2D space has the same number of points as a 1D space). Continuum hypothesis."
"W4","2.5.9","task","Apply Schroder-Bernstein theorem to show that bijection must exist."
"W4",2.6,"task","Perform actions on matrices with discrete objects"
"W4",2.6,"description","Matrices are rectangular tables of objects of some kind (usually numbers or truth values); this subsection shows how they can be used to describe functional dependencies between elements in two sets - e.g. linear transformations; directed graphs; relations on a given set - all these situations will need them. At this point it is just an introduction for the matrix notation and some simple manipulations on them. "
"W4",2.6,"reading","Ch02P6 (Rosen2019, p.188-193) Matrices"
"W4",2.6,"video","https://youtu.be/dLm1pglDFHA (Brehm2020_2_6_1) Matrices and Matrix Operations"
"W4",2.6,"video","https://youtu.be/EkW2QsKyddM (Brehm2020_2_6_3) Zero-One Matrices"
"W4","2.6.1","task","Perform sum, difference, product of numeric matrices"
"W4","2.6.2","task","Define join (memberwise disjunction), meet (entry-by-entry conjunction) and the Boolean product of two matrices. "
"W4","2.6.3","task","Define transposed matrices, symmetric matrices. "
"W4","2.6.6","objective","Define which sets are countable; how they can be enumerated and encoded in a computer's memory. (Consider finite sequences of integers; infinite sequences of integers; computable infinite sequences of integers; various sets of functions between certain sets)"
,,,
,,,
,,,
"W5",3,"topic","Identify algorithms and estimate their time complexity"
"W5",3.1,"task","Describe algorithms for lists/arrays and their paradigms"
"W5",3.1,"description","In the subsection we introduce various concepts related to algorithms: input, output, pseudocode, execution time, underlying variables and data, proofs of correctness. "
"W5",3.1,"reading","P03P1 (Rosen2019, p.201-213) Algorithms"
"W5",3.1,"video","https://youtu.be/vPqQSKsxH4k (Brehm2020_3_1_1) Introduction to Algorithms and Pseudo Code"
"W5",3.1,"video","https://youtu.be/4kVVhSy3kfA (Brehm2018_3_1_2) Searching Algorithms"
"W5",3.1,"video","https://youtu.be/GNGUziMQ4R4 (Brehm2018_3_1_3) Sorting Algorithms"
"W5",3.1,"video","https://youtu.be/kkgTu5kaIXw (Brehm2018_3_1_4) Optimization Algorithms"
"W5","3.1.1","task","Describe common characteristics of algorithms (mass problem, input, output, strictly defined steps, finite time)"
"W5","3.1.2","task","Describe an algorithm to find maximum in a list of n with pseudocode."
"W5","3.1.3","task","Describe linear search algorithm"
"W5","3.1.4","task","Describe binary search algorithm"
"W5","3.1.5","task","Describe bubble sort algorithm"
"W5","3.1.6","task","Describe the naive string matching algorithm"
"W5","3.1.7","task","Describe the greedy algorithm to pay the change with minimum coins."
"W5","3.1.8","task","Prove that for the eurocent coins (1,2,5,10,20,50,100,200) greedy algorithm is optimal"
"W5","3.1.9","task","Describe the greedy scheduling algorithm"
"W5","3.1.10","task","Define the halting problem; prove that it is unsolvable"
"W5",3.2,"task","Define and use the big-O notation and related complexity measures"
"W5",3.2,"description","This subsection is preoccupied by the growth asymtotics, it introduces various growth rates (Big-O-Notation) and also the related Omega and Theta notations."
"W5",3.2,"reading","Ch03P2 (Rosen2019, p.216-228) The Growth of Functions"
"W5",3.2,"reading","https://medium.com/@.RT/total-n00bs-guide-to-big-o-big-%CF%89-big-%CE%B8-aa259ae8a1c2 (Tepper2016) Total Noobs Guide to Big O"
"W5","3.2.1","task","Define the big-O notation"
"W5","3.2.2","task","Compare various elementary functions by their growth speed"
"W5","3.2.3","task","Compute the big-O for sums and products of functions."
"W5","3.2.4","task","Define big-Omega and big-Theta notations"
"W5","3.2.5","task","Produce graphs (in xOy plane) or tables for some functions to compare their growth"
"W5",3.3,"task","Define and determine some algorithm complexity measures"
"W5",3.3,"description","This subsection combines two previous ones – we analyze the pseudocode of an algorithm and come up with an estimate of how many operations it takes (up to a constant factor and addition with terms of smaller growth order)."
"W5",3.3,"reading","Ch03P3 (Rosen2019, pp.231-235) Complexity of Algorithms"
"W5","3.3.1","task","Define time and space complexity for the given run of a program"
"W5","3.3.2","task","Define worst-case and average time complexity"
"W5","3.3.3","task","Describe the number of steps for binary search in a list of n elements"
"W5","3.3.4","task","Compute the number of steps for bubble sort"
"W5","3.3.5","task","Compute the lower bound for any sorting algorithm"
"W5","3.3.6","task","Compute the number of steps for naive string matching"
"W5","3.3.7","task","Develop an intuition about function growth rates"
"W5","3.3.8","task","Analyze some Fibonacci computation algorithms (avoid cases where recursive calls multiply exponentially)"
"W5","3.3.9","objective","Compare two functions in terms of their asymptotic growth; find their location in the growth hierarchy. "
"W5","3.3.10","objective","Given a pseudocode of an algorithm (and assumptions about the speed of its data-structure calls) find its time complexity in terms of its input length. "
"W5","3.3.11","objective","For problems like sorting, searching, some number manipulations offer an optimal algorithm or analyze, if the proposed algorithm is efficient enough. "
,,,
,,,
,,,
"W6",4,"topic","Use modular arithmetic"
"W6",4.1,"task","Operate with modular arithmetic"
"W6",4.1,"description","This subtopic only focuses on modular arithmetic (properties that are preserved when finding remainders during division by a fixed positive integer $m$)."
"W6",4.1,"reading","Ch04P1 (Rosen2019, p.251-258) Divisibility and Modular Arithmetic"
"W6",4.1,"reading","https://bit.ly/2Mi54lg (Knepley2020, p.132-182) CSE191, Integer Arithmetic"
"W6",4.1,"video","https://youtu.be/XnshTUaIpc8 (Brehm2018_4_1_1) Divisibility"
"W6",4.1,"video","https://youtu.be/Z-si4GE_n9k (Brehm2018_4_1_2) Modular Arithmetic"
"W6","4.1.1","task","Add, subtract and multiply congruences (ring operations)"
"W6","4.1.2","task","Transform congurences equivalently"
"W6","4.1.3","code","Statements on divisibility, modular arithmetic and congruences that use ring properties on Z."
"W6",4.2,"task","Convert integer representations"
"W6",4.2,"description","In this subsection we convert decimal to binary and similar numbering systems."
"W6",4.2,"reading","Ch04P2 (Rosen2019, p.260-268) Integer Representation and Algorithms"
"W6",4.2,"video","https://youtu.be/xtIIUB6QUJ8 (Brehm2018_4_2_1) Decimal Expansions"
"W6",4.2,"video","https://youtu.be/iSTpfqZwb5A (Brehm2018_4_2_2) Binary, Octal and Hexadecimal Expansions"
"W6",4.2,"video","https://youtu.be/vAKiTsEKEQM (Brehm2018_4_2_3) Conversion Between Binary, Octal and Hexadecimal Expansions"
"W6",4.2,"video","https://youtu.be/5ZbKtsbctf4 (Brehm2018_4_2_4) Algorithms for Integer Operations"
"W6","4.2.1","task","Convert a representation of a number into a number by Horner’s scheme"
"W6","4.2.2","task","Obtain a representation of a number by Horner’s scheme backwards"
"W6","4.2.3","task","Perform arithmetic operations on number representations"
"W6","4.2.4","task","Make computations on binary fractions (including infinite periodic fractions)"
"W6","4.2.5","task","Perform efficient modular exponentiation"
"W6",4.3,"task","Prove properties of primes, GCD, LCM and related algorithms"
"W6",4.3,"description","This subtopic introduces algorithms related to primality, divisibility and finding GCD or LCM."
"W6",4.3,"reading","Ch04P4 (Rosen2019, p.271-288) Primes and Greatest Common Divisors"
"W6",4.3,"video","https://youtu.be/tJeP8882zZg (Brehm2018_4_3_1) Prime Numbers and Their Properties"
"W6",4.3,"video","https://youtu.be/Dhpp5yTzNY8 (Brehm2018_4_3_2) GCD's and LCM's"
"W6",4.3,"video","https://youtu.be/UDrU6Aw_gEY (Brehm2018_4_3_3) The Euclidean Algorithm"
"W6","4.3.1","task","Analyze the full search primality testing algorithm (divide up to $\sqrt{n}$)"
"W6","4.3.2","task","Prove that there are infinitely many primes"
"W6","4.3.3","task","State known facts about prime “gaps”"
"W6","4.3.4","task","State properties of LCD and GCD"
"W6","4.3.5","task","Apply Euclid algorithm to compute LCD"
"W6",4.4,"task","Find Bezout coefficients and solve linear congruences"
"W6",4.4,"description","Show how to solve linear congruences (or systems of linear congruences as in the Chinese Remainder theorem)"
"W6",4.4,"reading","Ch04P4 (Rosen2019, p.290-300) Solving Congruences"
"W6",4.4,"video","https://youtu.be/oXRT_TNoBaM (Brehm2018_4_3_4) GCD's as Linear Combinations"
"W6",4.4,"video","https://youtu.be/Ag3wFeScdP4 (Brehm2018_4_4_1) Solving Congruences"
"W6","4.4.1","task","Use Blankinship algorithm to compute Bezout coefficients"
"W6","4.4.2","task","Find inverse of a number w.r.t. some module"
"W6","4.4.3","task","Solve arbitrary linear congruences"
"W6","4.4.4","task","Prove and use Chinese remainder theorem"
"W6","4.4.5","task","Prove and use Little Fermat theorem"
"W6","4.4.6","task","Formulate and use Euler's theorem"
"W6","4.4.7","task","Solve problems with primitive roots and discrete logarithms"
"W6",4.5,"task","Define hashing and checksums in terms of modular arithmetic"
"W6",4.5,"description","The only subsection on the applications of number theory focuses on algorithms to compute hash functions and also the checksums designed to ensure the integrity of data. (There are other major applications, say, in cryptography, but we do not care, since the course has sufficiently large scope already.)"
"W6",4.5,"reading","Ch04P5 (Rosen2019, p.303-308) Applications of Congruences"
"W6","4.5.1","task","Define a simple hashing function using modular arithmetic"
"W6","4.5.2","task","Define some popular checksums using modular arithmetic"
"W6","4.5.3","task","Check the integrity of credit cards, personal identity numbers (""personas kods"", Latvia) and ISBN. "
"W6","4.5.4","objective","Do addition, subtraction and multiplication on congruences"
"W6","4.5.5","objective","Do efficient raising to powers on congruences (apply Euler's theorem, if needed)"
"W6","4.5.6","objective","Run Euclid's algorithm to find GCD"
"W6","4.5.7","objective","Solve linear congruences, convert word problems into linear congruences"
"W6","4.5.8","objective","Perform Luhn check, ISBN check and some similar checksum tests"
"W6","4.5.9","objective","Convert to binary, hexadecimal, octal and back. "
,,,
,,,
,,,
"W7",5,"topic","Prove statements by mathematical induction"
"W7",5.1,"task","Prove general statements using the simplest scheme of mathematical induction ($n \rightarrow n+1$)"
"W7",5.1,"description","This subsection explains the very basic scheme of induction (prove the statement for $n=0$ or $n=1$, then prove it by advancing one step at a time)."
"W7",5.1,"reading","Ch05P1 (Rosen2019, p.331-350) Mathematical Induction"
"W7",5.1,"video","https://youtu.be/TqpNDiqsz7k (Brehm2018_5_1_1) Mathematical Induction - Summation Formulae and Inequalities"
"W7",5.1,"video","https://youtu.be/pTj6J_kWddM (Brehm_2018_5_1_2) Mathematical Induction - Divisibility and Set Theory"
"W7","5.1.1","task","Prove summation formulas and other algebraic identities by induction"
"W7","5.1.2","task","Prove inequalities by induction"
"W7","5.1.3","task","Use the method of invariants to prove impossibility results"
"W7",5.2,"task","Prove statements by variants of mathematical induction"
"W7",5.2,"description","Define and prove statements by induction, where it is essential to look back more than one step."
"W7",5.2,"reading","Ch05P2 (Rosen2019, p.354-362) Strong Induction and Well-Ordering"
"W7",5.2,"video","https://youtu.be/mZ8wcxnT9WQ (Brehm2018_5_2_1) The Well Ordering Principle and Strong Induction"
"W7","5.2.1","task","Introduce hot and cold states in combinatorial games. "
"W7","5.2.2","task","Analyze winning strategies in some games using strong induction"
"W7","5.2.3","task","Prove formulas for recurrent sequences (such as Fibonacci) by using modified scheme of induction. "
"W7",5.3,"task","Use recursive definitions and structural induction"
"W7",5.3,"description","Define and prove inductive statements that can be defined on expressions and/or tree-like structures."
"W7",5.3,"reading","Ch05P3 (Rosen2019, p.365-378) Recursive Definitions and Structural Induction"
"W7",5.3,"video","https://youtu.be/_EVvOzBI05Q (Brehm_5_3_1) Recursive Definitions"
"W7","5.3.1","task","Define sequences recursively (Fibonacci, Catalan, etc.) and illustrate them in word problems."
"W7","5.3.2","task","Define tree-like structures recursively (next level in a tree is created from multiple subtrees)"
"W7","5.3.3","task ","Define syntax trees (for expressions, statements) in programming language"
"W7","5.3.4","task","Introduce attributes that are calculated as we move up the tree"
"W7","5.3.5","task","Define simple fractals using Lindenmayer systems"
"W7","5.3.6","objective","Prove general statements (predicates on the set of natural numbers) using mathematical induction"
"W7","5.3.7","objective","Explain proofs using invariants showing impossibility (some property holds at the beginning; then various transformations are applied that preserve that invariant; so it must hold at the end)"
"W7","5.3.8","objective ","Prove some recurrent equalities (closed formulas for recurrent sequences) using mathematical induction"
"W7","5.3.9","objective","Create trees using production rules (like in Lindenmayer systems, formal grammars, etc.), evaluate attributes on these trees."
,,,
,,,
,,,
"W8",9,"topic","Introduce relations, their properties and possible representations."
"W8",9.1,"task","Define and analyze binary relations"
"W8",9.1,"description","This subsection only discusses binary relations at a general level."
"W8",9.1,"reading","Ch09P1 (Rosen2019, p.599-608) Relations and their properties"
"W8",9.1,"video","https://youtu.be/dbihQ6tiRJ0 (Brehm2020_9_1_1) Introduction to Relations"
"W8",9.1,"video","https://youtu.be/Crsyv7upe9g (Brehm2020_9_1_2) Properties of Relations"
"W8",9.1,"video","https://youtu.be/aEcAh-lcsgY (Brehm2020_9_1_3) Combining Relations"
"W8","9.1.1","task","Define general binary relations on $A \times B$ and on $A \times A$."
"W8","9.1.2","task","Identify properties for relations; check them in examples."
"W8","9.1.3","task","Combine relations into new ones."
"W8",9.2,"task","Operate with relational operations"
"W8",9.2,"description","The subsection adresses somewhat marginal topic of n-ary relations, but it is still important, since it forms the basis of relational databases (RDBMS) such as MySQL or Oracle. We try to illustrate it with in-memory databases (such as Pandas library)."
"W8",9.2,"reading","Ch09P2 (Rosen2019, p.611-619) n-ary Relations"
"W8",9.2,"video","https://youtu.be/7ZRCUH-a2s0 (CS186Berkeley2018) Binary vs Ternary Relationships"
"W8","9.2.1","task","Define an n-ary relation"
"W8","9.2.2","task","Identify relational concepts in databases (tables, primary keys, foreign keys, composite keys)"
"W8","9.2.3","task","Do simple selects and joins"
"W8","9.2.4","task","Define support and confidence in association rules (such as item purchases)"
"W8",9.3,"task","Represent binary relations as matrices and directed graphs"
"W8",9.3,"description","This subsection discusses advantages for each representation and what things can be computed for each one."
"W8",9.3,"reading","Ch09P3 (Rosen2019, p.621-626) Representing Relations"
"W8",9.3,"video","https://youtu.be/KK-gZo2N0wk (Brehm2020_9_3_1) Matrix Representations of Relations and Properties"
"W8",9.3,"video","https://youtu.be/9a39kWlFg-s (Brehm2020_9_3_1) Representing Relations Using Digraphs"
"W8","9.3.1","task","Manipulate relations with their matrix representation"
"W8","9.3.2","task","Manipulate relations with their directed graph representation"
"W8","9.3.3","objective","Prove or disprove that a relation has a given property (include function/mapping properties). "
"W8","9.3.4","objective","Use in-memory databases to illustrate relational algebra (select and join)"
"W8","9.3.5","objective","Compute support and confidence for item collections in an n-ary database"
"W8","9.3.6","objective","Transform relations from one representation to another."
"W8","9.3.7","objective","Construct relations by their properties."
,,,
,,,
,,,
"W9",9.4,"task","Find and use relation closures"
"W9",9.4,"description","The subsection introduces the concept of closure (as the “smallest” of all possible subsets with the given property). One particularly useful subtype of closure is the transitive closure. "
"W9",9.4,"reading","Ch09P4 (Rosen2019, p.599-608) Relations and their properties"
"W9",9.4,"video","https://youtu.be/NM0mAmylfMg (GeorgiaTech2015) Transitive Closure"
"W9","9.4.1","task","Define transitive closure and some other closures."
"W9","9.4.2","task","Use and analyze Warshall Algorithm"
"W9",9.5,"task","Use equivalence relations for set partitions"
"W9",9.5,"description","This subsection discusses a very useful subspecies of relations – equivalence relations; and how they can be used to structure the set where they are defined."
"W9",9.5,"reading","Ch09P5 (Rosen2019, p.599-608) Relations and their properties"
"W9",9.5,"video","https://youtu.be/ZgcTX16borA (Brehm2020_9_5_1) Equivalence Relations"
"W9","9.5.1","task","Verify that a relation is an equivalence relation"
"W9","9.5.2","task","Show the equivalence classes created by an equivalence relation"
"W9",9.6,"task","Prove and use statements about partially ordered sets"
"W9",9.6,"description","This subsection addresses a set with a common relation – that of a partial order (which is also reflexive, antisymmetric and transitive, but two elements may also be incomparable)."
"W9",9.6,"reading","Ch09P6 (Rosen2019, p.599-608) Relations and their properties"
"W9",9.6,"video","https://youtu.be/samD2wp04Nw (Lambert2019) What is a Partial Order Relation?"
"W9","9.6.1","task","Introduce partially ordered set and related concepts (well ordered, totally ordered sets)."
"W9","9.6.2","task","Introduce various types of lexicographic orderings (also reverse ordering, shortlist ordering)"
"W9","9.6.3","task","Manipulate Hasse diagrams and transitive closures on them"
"W9","9.6.4","task","Define lattices and the concepts of least upper bound and greatest lower bound."
"W9","9.6.5","task","Describe topological sorting"
"W9","9.6.6","objective","Transform Hasse diagram into its transitive closure and back again"
"W9","9.6.7","objective","Construct other types of closures (reflexive and symmetric closure)"
"W9","9.6.8","objective","Use equivalence relations in various problems"
"W9","9.6.9","objective","Define setoids as sets of equivalence classes with their canonical representatives"
"W9","9.6.10","objective","Define and use the total order relations."
"W9","9.6.11","objective","Define and use the partial order relations"
"W9","9.6.12","objective","Run an algorithm on the ordered sets, do topological sorting"
,,,
,,,
,,,
,,,
"W10",6,"topic","Use combinatorics"
"W10",6.1,"task","Count the number of elements in ordered or unordered selections with or without repetition. "
"W10",6.1,"description","The subsection shows easy principles to evaluate the number of various selections (and they generalize lots of specialized formulas)"
"W10",6.1,"reading","Ch06P1 (Rosen2019, p.405-416) The Basics of Counting"
"W10",6.1,"video","https://youtu.be/32MnjUdIF0c (Brehm2020_6_1_1) Counting Rules"
"W10","6.1.1","task","Use the product rule and the sum rule"
"W10","6.1.2","task","Use the subtraction rule and the division rule"
"W10","6.1.3","task","Use the principle of inclusion-exclusion"
"W10",6.2,"task","Use the Pigeonhole principle"
"W10",6.2,"description","Subsection discusses a simple idea of a proof by contradiction also known as the Dirichlet principle (if there are n+1 objects and n boxes, then at least one box should have at least 2 objects) and some variants of this."
"W10",6.2,"reading","Ch06P2 (Rosen2019, p.420-426) The Pigeonhole Principle"
"W10","6.2.1","task","Use the simplest form of Pigeonhole principle"
"W10","6.2.2","task","Use the generalizations of the Pigeonhole principle"
"W10","6.2.3","task","Use Pigeonhole principle in number theory"
"W10",6.3,"task","Count permutations and combinations"
"W10",6.3,"description","This is similar to 6.1, but we revisit the material and show how to compute some well-known selections (permutations and combinations with or without repetition)."
"W10",6.3,"reading","Ch06P3 (Rosen2019, p.428-434) Permutations and Combinations"
"W10",6.3,"video","https://youtu.be/1CTzx89Kzy4 (Brehm2020_6_3_1) Permutations and Combinations"
"W10",6.3,"video","https://youtu.be/zG1svk2ilZ4 (Brehm2020_6_3_2) Counting Rules Practice"
"W10","6.3.1","task","Count permutations without repetitions"
"W10","6.3.2","task","Count combinations without repetitions"
"W10",6.4,"task","Define binomial coefficients"
"W10",6.4,"description","This is similar to 6.1, but we revisit the material and show how to compute some well-known selections (permutations and combinations with or without repetition)."
"W10",6.4,"reading","Ch06P4 (Rosen2019, p.437-443) Binomial Coefficients"
"W10",6.4,"video","https://youtu.be/m8TsPMfcasI (Brehm2020_6_4_1) The Binomial Theorem"
"W10","6.4.1","task","Build pascal’s triangle and use it to view various sums of binomial coefficients"
"W10","6.4.2","task","Use Newton’s binomial formula"
"W10","6.4.3","task","Use multinomial formula"
"W10","6.4.4","task","Prove various identities with binomial coefficients."
"W10",6.5,"task","Compute and use generalized permutations and combinations"
"W10",6.5,"description","This subsection is a summary that discusses how the symmetry in a problem (distinguishable or indistinguishable objects, their order, their repetitions) affect the total count."
"W10",6.5,"reading","Ch06P5 (Rosen2019, p.445-454) Binomial Coefficients"
"W10","6.5.1","task","Count permutations with repetitions"
"W10","6.5.2","task","Count combinations with repetitions"
"W10","6.5.3","task","Count other selections with symmetry (distinguishable order, circular direction, etc.)"
"W10","6.5.4","objective","Build the “decision trees” to compute combinations (using addition and multiplication rule)"
"W10","6.5.5","objective","Build the clusterings on sets to compute combinations (using subtraction and division rule)"
"W10","6.5.6","objective","Use Pigeonhole principle for number theory facts (full system of remainders and so on)"
"W10","6.5.7","objective","Use binomial coefficients in polynomial algebra and related counting tasks"
"W10","6.5.8","objective","Use counting formulas for combinatorial problems with various types of symmetries (ordered vs. unordered selections; ordered in a cycle; ordered in an unoriented cycle; etc.)"
,,,
,,,
,,,
"W11",7,"topic","Compute and manipulate discrete probabilities"
"W11",7.1,"task","Use the classical definition of probability"
"W11",7.1,"description","This subsection introduces the simplest notion of probability for discrete (i.e. countable) events. Use assumptions that all elementary events have equal probabilities."
"W11",7.1,"reading","Ch07P1 (Rosen2019, p.469-475) Introduction to Discrete Probability"
"W11",7.1,"video","https://youtu.be/x5TIZMZpWHM (Brehm2020_7_1_1) An Intro to Discrete Probability"
"W11",7.1,"video","https://youtu.be/ug08tMKxtZw (Brehm2020_7_1_2) Discrete Probability Practice"
"W11","7.1.1","task","Define the classical definition of probability and event"
"W11","7.1.2","task","Define union, intersection and comlement of events"
"W11","7.1.3","task","Compute probability for some events and combinations of events"
"W11","7.1.4","task","Analyze probabilistic “paradoxes” and surprises"
"W11",7.2,"task","Introduce the basic concepts of the probability theory"
"W11",7.2,"description","This chapter introduces all the fundamental concepts of discrete probabilities once they have been defined."
"W11",7.2,"reading","Ch07P2 (Rosen2019, p.477-491) Probability Theory"
"W11",7.2,"video","https://youtu.be/ewrsDwDJXn4 (Brehm2020_7_2_1) Probability Theory"
"W11",7.2,"video","https://youtu.be/37BhaWsJdrs (Brehm2020_7_2_2) Random Variables and the Binomial Distribution"
"W11","7.2.1","task","Add probabilities of elementary events in various combinations"
"W11","7.2.2","task","Use the sum for pairwise disjoint events"
"W11","7.2.3","task","Use the inclusion/exclusion principle for probabilities"
"W11","7.2.4","task","Define and use conditional probabilities"
"W11","7.2.5","task","Define and use independent events"
"W11","7.2.6","task","Define Bernoulli distribution"
"W11","7.2.7","task","Define Binomial distribution"
"W11","7.2.8","task","Define and use the concept of random variable"
"W11","7.2.9","task","Introduce and solve the Birthday problem (1st kind of waiting time)"
"W11","7.2.10","task","Introduce other types of waiting times"
"W11","7.2.11","task","Define probabilistic algorithms and probabilistic simulations"
"W11",7.3,"task","Apply Bayes’ theorem"
"W11",7.3,"description","The subsection shows a very practical way to express unknown conditional probabilities using directly observable ones (which show the “opposite” conditional probabilities)."
"W11",7.3,"reading","Ch07P3 (Rosen2019, p.494-501) Bayes’ Theorem"
"W11","7.3.1","task","Formulate and prove Bayes’ Theorem"
"W11","7.3.2","task","Formulate some variants and generalizations of Bayes’ Theorem"
"W11","7.3.3","task","Show the applications of Bayes’ Theorem in text clusterization, spam filters and Data Leak Prevention"
"W11",7.4,"task","Summarise data with expected value and variance"
"W11",7.4,"description","There are many ways to summarize larger amounts of numeric data (including median, inter-quartile range, mode, etc.), but here we only deal with the two simplest measures. Expected value (also mean and expectation) is defined for a random variable and it expresses the location. Variance (dispersija) and its square root – standard deviation (standartnovirze) measure the variability of data – how far it goes from the mean value."
"W11",7.4,"reading","Ch07P4 (Rosen2019, p.503-517) Expected Value and Variance"
"W11","7.4.1","task","Define and compute the expected value of a random variable"
"W11","7.4.2","task","Use the linearity of expected value and other properties"
"W11","7.4.3","task","Apply the expected value to find average-case computational complexity."
"W11","7.4.4","task","Define the uniform distribution; find its expected value and variance"
"W11","7.4.5","task","Define the Poisson distribution with parameters; find its expected value and variance"
"W11","7.4.6","task","Define the geometric distribution and find its expected value (the 2nd type of waiting time)"
"W11","7.4.7","task","Define Multinomial distributions and their parameters; find its expected value and variance"
"W11","7.4.8","task","Define Hypergeometric distrubtions and their parameters; find its expected value and variance"
"W11","7.4.9","task","Define independent set of random variables"
"W11","7.4.10","task","Define the variance of a random variable and its standard deviation. "
"W11","7.4.11","task","Formulate and prove Bienayame’s Formula"
"W11","7.4.12","task","Formulate and prove Markov’s Inequality"
"W11","7.4.13","task","Formulate and prove Chebyshev’s Inequality"
"W11","7.4.14","objective","Use classic probability definitions to analyze combinatorial tasks"
"W11","7.4.15","objective","Use analytic methods and randomized experiments to analyze waiting times and similar word problems."
"W11","7.4.16","objective","Use Bayes formula to compute conditional probabilities"
"W11","7.4.17","objective","Apply appropriate discrete distributions as models for real-life problems"
"W11","7.4.18","objective","Compute expected value and variance for random variables, use them to estimate probabilities of hitting an interval"
,,,
,,,
,,,
"W12",8,"topic","Obtain convenient expressions for various useful sequences and counting problems"
"W12",8.1,"task","Build recurrent relations for word problems"
"W12",8.1,"description","The subsection shows how real-life problems can be converted into recurrent sequences; their definitions and closed formulas for these sequences (a closed formula is an explicit expression to compute the n-th member of a sequence without going through all the recurrent members preceding it. "
"W12",8.1,"reading","Ch08P1 (Rosen2019, p.527-536) Applications of Recurrence Relations"
"W12",8.1,"video","https://youtu.be/awR_p6J7Lyg (Brehm2020_8_1_1) Modeling with Recurrence Relations"
"W12","8.1.1","task","Write recurrent relations for Hanoi tower and similar recursive processes"
"W12","8.1.2","task","Write recurrent relations to count strings with certain properties"
"W12","8.1.3","task","Define Catalan numbers and use their correspondence with counting hierarchy-like structures"
"W12",8.2,"task","Solve linear recurrence relations"
"W12",8.2,"description","Homogeneous and nonhomogeneous linear recurrences have some general methods to solve them (characteristic equations that allow to determine, what part of the sequence grows like a geometric progression). Fibonacci series is the best known linear recurrence, but there are many others. "
"W12",8.2,"reading","Ch08P2 (Rosen2019, p.540-550) Solving Linear Recurrence Relations"
"W12",8.2,"video","https://youtu.be/mJPoIxvjUz0 (Brehm2018_8_2_1) Second Order Linear Homogeneous Recurrence Relations"
"W12","8.2.1","task","Use the characteristic equation for the case when all the roots are different."
"W12","8.2.2","task","Use the characteristic equation for the case when some roots are equal."
"W12","8.2.3","task","Use the characteristic equation for the case when there are complex roots"
"W12","8.2.4","task","Solve linear nonhomogeneous relations"
"W12",8.3,"task","Solve recurrences expressing divide-and-conquer algorithms"
"W12",8.3,"description","Some practically important recurrences (and related algorithms) are based on subdividing task into parts (and then reassembling their solutions with some additional cost). There is a famous theorem that solves this recurrence (and has three subcases) – it is called Master’s Theorem. "
"W12",8.3,"reading","Ch08P3 (Rosen2019, p.553-561) Divide-and-Conquer Algorithms and Recurrence Relations"
"W12",8.3,"video","https://youtu.be/2H0GKdrIowU (Rman2018) What is the Master Theorem?"
"W12","8.3.1","task","Define and analyze the fast multiplication algorithm by Karatsuba"
"W12","8.3.2","task","Define and analyze the fast matrix multiplication by Strassen"
"W12","8.3.3","task","Define and analyze the merge-sort algorithm"
"W12","8.3.4","task","Generalize the recurrence relations into Master theorem"
"W12",8.5,"task","Apply inclusion-exclusion principle"
"W12",8.5,"description","Some counting tasks are more easily solved for the intersections (not unions) of multiple sets. If we need to solve them for unions, it is possible to count the union by adding the counts for individual sets, then subracting (and/or subsequently adding) for those cases where something has been counted twice, three times, etc."
"W12",8.5,"reading","Ch08P5 (Rosen2019, p.579-583) Inclusion-Exclusion"
"W12",8.5,"video","https://youtu.be/YlKDp03Kg68 (Brehm2020_8_5_1) The Principle of Inclusion Exclusion"
"W12","8.5.1","task","Explain inclusion-exclusion principle on a Venn diagram"
"W12","8.5.2","task","Use inclusion-exclusion principle in word problems when intersection counts are known"
"W12","8.5.3","task","Use inclusion-exclusion principle for number divisibility and Euler’s function"
"W12","8.5.4","objective","Given a verbal description for a combinatorial problem, formulate the recurrence formula"
"W12","8.5.5","objective","Solve homogenous recurrent relations"
"W12","8.5.6","objective","Solve non-homogenous recurrent relations"
"W12","8.5.7","objective","Apply Master’s theorem for algorithm complexity"
"W12","8.5.8","objective","Apply inclusion-exclusion principle for hatcheck and similar problems"
,,,
,,,
,,,
"W13",10,"topic","Solve graph problems and use graphs to model other tasks"
"W13",10.1,"task","Represnt word problem situations as graphs; define vertices and nodes for each case"
"W13",10.1,"description","This subsection explains obvious and less obvious situations where graphs may provide an answer to combinatorial questions."
"W13",10.1,"reading","Ch10P1 (Rosen2019, p.673-682) Graphs and Graph Models"
"W13",10.1,"video","https://youtu.be/QHmL0AnZ3Dc (Brehm2020_10_1_1) Introduction to Graphs"
"W13","10.1.1","task","Explain graph concepts to communication and transport networks"
"W13","10.1.2","task","Explain graph concepts in social networks, quotations, Web links, set intersections"
"W13","10.1.3","task","Explain graph concepts in semantic Web"
"W13","10.1.4","task","Explain graph concepts in tournaments"
"W13","10.1.5","task","Explain directed graph concepts in precedence and dependency problems"
"W13",10.2,"task","Understand graph-related concepts and recognise them in concrete graphs"
"W13",10.2,"description","The subsection focuses on identifying specific phenomena in graphs and also introduces additional restrictions on graphs (connected, bipartite, directed, planar, acyclic and so on) which lead to different parts of the theory."
"W13",10.2,"reading","Ch10P2 (Rosen2019, p.685-694) Graph Terminology and Special Tpes of Graphs"
"W13",10.2,"video","https://youtu.be/PDxUDYEE-Sk (Brehm2020_10_2_1) Graph Terminology"
"W13",10.2,"video","https://youtu.be/OgvGo09kAvA (Brehm2020_10_2_2) Special Types of Graphs"
"W13",10.2,"video","https://youtu.be/CQ2sIdOMin8 (Brehm2020_10_2_3) Applications of Graphs"
"W13","10.2.1","task","Define adjacency, neighborhood, the degree of a vertex, the Handshake theorem (the sum of all degrees in a graph)"
"W13","10.2.2","task","Explain the differences for the same concepts in a directed graph"
"W13","10.2.3","task","Introduce some special graphs – complete graphs $K_n$, cycles $C_n$, wheels $W_n$ and $n$-dimensional cubes $Q_n$."
"W13","10.2.4","task","Define bipartite graphs and matching concepts."
"W13","10.2.5","task","Prove and use Hall’s Marriage theorem."
"W13",10.3,"task","Use adjacency list and matrix representations of graphs."
"W13",10.3,"description","The subsection compares two approaches to store graphs (such as using them as input for programs), and when to use each one. It also discusses the “invariant” properties of graphs that do not depend on their representations -  isomorphic graphs may be considered equivalent – regardless of how they are represented and how their vertices are labeled."
"W13",10.3,"reading","Ch10P3 (Rosen2019, p.703-710) Representing Graphs and Graph Isomorphism"
"W13","10.3.1","task","Describe a graph using adjacency lists"
"W13","10.3.2","task","Describe a graph using adjacency matrices"
"W13","10.3.3","task","Define graph isomorphism problem and solve it in some particular cases"
"W13",10.4,"task","Use the concepts of paths and connectivity"
"W13",10.4,"description","The subsection defines connectivity for undirected and also directed graphs (included strong connectivity). It also shows how this is related to finding path or paths between given vertices."
"W13",10.1,"reading","Ch10P4 (Rosen2019, p.714-724) Connectivity"
"W13","10.4.1","task","Define paths in undirected graphs"
"W13","10.4.2","task","Define connected components in an undirected graph"
"W13","10.4.3","task","Define some other vertex and edge connectedness measures"
"W13","10.4.4","task","Prove that two graphs are not isomorphic by looking at their paths or similar properties"
"W13","10.4.5","task","Show how the concepts apply to directed graphs"
"W13",10.5,"task","Solve problems related to cycles in graphs. "
"W13",10.5,"description","This subsection introduces computationally easy problem (Euler’s cycles) and computationally hard problem (Hamilton’s cycles) – and how each one of them may be used. "
"W13",10.5,"reading","Ch10P5 (Rosen2019, p.728-739) Euler and Hamilton Paths"
"W13","10.5.1","task","Define an Euler path in a graph"
"W13","10.5.2","task","Define and prove the necessary and sufficient coefficient for an Euler path"
"W13","10.5.3","task","Define the concept of a Hamiltonian path in a graph"
"W13","10.5.4","objective","Count varios graph elements from word problems and their representations"
"W13","10.5.5","objective","Construct paths in graphs defined in various ways; apply paths to answer questions about particular graphs"
"W13","10.5.6","objective","Use bipartite graphs and related concepts; find matchings and apply the Hall’s Marriage theorem"
"W13","10.5.7","objective","Find cycles in graph; both Euler and Hamilton ones."
,,,
,,,
,,,
"W14",11,"topic","Identify tree concepts, traverse trees with DFS and BFS for simple applications"
"W14",11.1,"task","Identify, list and count various objects in trees. "
"W14",11.1,"description","The root, inner nodes, leaves, ancestors and successors, paths, traversals – all these tree-related concepts are often needed when using hierarchies of various kinds. This subsection defines the concepts and also counts all such objects efficiently. "
"W14",11.1,"reading","Ch11P1 (Rosen2019, p.781-791) Introduction to Trees"
"W14",11.1,"video","https://youtu.be/hBKLhiumhhU (Brehm2020_11_1_1) Introduction to Trees"
"W14",11.1,"video","https://youtu.be/g9_PuhLwkOU (Brehm2018_11_1_2) Rooted Trees"
"W14","11.1.1","task","Define trees, inner nodes, leaves and related concepts"
"W14","11.1.2","task","Rooted trees, parents, children, siblings, ascendants, descendants, height and depth."
"W14","11.1.3","task","Define full n-ary trees"
"W14","11.1.4","task","Count (or prove bounds) for various elements in trees"
"W14","11.1.5","task","Prove the logarithmic estimate for the depth of a full n-ary tree"
"W14",11.3,"task","Define and use preorder, inorder and postorder traversals in a rooted tree"
"W14",11.3,"description","There are a few standard orders how to visit nodes in a tree (DFS is somewhat similar to visiting a labyrinth – and it also has three separate flavors). All these orders are important as they serve as building blocks to various algorithms. "
"W14",11.3,"reading","Ch11P3 (Rosen2019, p.808-819) Tree Traversal"
"W14","11.3.1","task","Define BFS traversal in a tree"
"W14","11.3.2","task","Define DFS preorder traversal"
"W14","11.3.3","task","Define DFS inorder traversal"
"W14","11.3.4","task","Define DFS post-order traversal"
"W14","11.3.5","task","Use abstract syntax trees to get infix, prefix and postfix expressions"
"W14",11.4,"task","Define and construct MSTs (Minimum Spanning Trees)"
"W14",11.4,"description","This section deals with MSTs – a concept applicable to an arbitrary connected graph with a tree (basically, which edges do we select from a given graph, so that it is a spanning tree (still connected graph, but does not contain any redundant  edges – there are no loops)."
"W14",11.4,"reading","Ch11P4 (Rosen2019, p.821-832) Spanning Trees"
"W14","11.4.1","task","Define Minimum Spanning Trees"
"W14","11.4.2","task","Construct the Spanning Trees obtained from the BFS or DFS traversals"
"W14","11.4.3","task","Define the backtracking problem to search for a solution in a hierarchy"
"W14","11.4.4","objective","Identify tree concepts; count them in trees defined in various ways"
"W14","11.4.5","objective","Navigate trees (show how to get from one node to another one)."
"W14","11.4.6","objective","Recognize rooted trees with additional limitations (full binary, n-ary)"
"W14","11.4.7","objective","Define and find Minimum Spanning Trees"
