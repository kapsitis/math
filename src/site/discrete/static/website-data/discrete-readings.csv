"ID","Sub","Key ","Value"
1,0,"title","Algorithms for Large Primes"
1,0,"name","TBA"
1,0,"description","It would be highly inefficient to search for prime numbers with a full search algorithm such as the Sieve of Eratosthenes or testing divisibility up to the square root. Nevertheless, large primes are important for cryptography and other applications. There are several efficient algorithms for primality testing."
1,1,"url","https://bit.ly/2tx7Iub"
1,1,"link","The Sieve of Eratosthenes"
1,1,"note","An ancient algorithm to build a list of primes in a large interval."
1,2,"url","https://bit.ly/2uhos8L"
1,2,"link","Miller-Rabin primality test"
1,2,"note","Most practical and widely used algorithm is probabilistic. It may falsely claim that a composite number is prime with a small probability. The error can be made as small as you want, if you run sufficiently many tests."
1,3,"url","https://www.mersenne.org/"
1,3,"link","Great Internet Mersenne Prime Search (GIMPS) project"
1,3,"note","The largest known primes have special form – they are named Mersenne Primes. They have even more efficient algorithms to check their primality (much faster than Miller-Rabin or Agrawal-Kayal-Saxena). Since 1996 there is an international activity to search for new Mersenne Primes - using computing power all around the world. This distributed computing effort served as a prototype for Bitcoin mining two decades later. "
1,4,"url","https://bit.ly/2R44ZBB"
1,4,"link","Agrawal-Kayal-Saxena primality test"
1,4,"note","For several decades there was no known deterministic efficient (polynomial time) algorithm to find primes. Miller-Rabin test did not count (since it is probabilistic). In 2002 the first algorithm to find primes efficiently was found."
2,0,"title","Secure Hashing Algorithms"
2,0,"name","K.L."
2,0,"description","Hash algorithms (one-way functions that map large domain of inputs to a smaller range of values) may include checksums, CRC and other simple computations that could ensure, for example, that there have been no errrors when transmitting files. On the other hand, Secure Hash Algorithms should ensure that nobody can infer any meaningful information from the hashed value, and most importantly – it should be prohibitively expensive to build “collisions” (find any two arguments that map to the same value). They are used to store user passwords and other information (that we need to check against, but do not want to store in cleartext). Historically MD5 algorithm has been widely used, but it turned out to be insecure (collisions are relatively easy to find). Therefore there have been SHA1, SHA2 (including various lengths of the hash values – SHA-256 is a member of SHA2 family), SHA3 and some others."
2,1,"url","https://en.wikipedia.org/wiki/Cryptographic_hash_function"
2,1,"link","Cryptographic Hash Functions"
2,1,"note","Overall description of the problem."
2,2,"url","https://blog.jscrambler.com/hashing-algorithms/"
2,2,"link","Comparison of hashing algorithms"
2,2,"note","Explanation why nobody should use MD5 for security purposes."
2,3,"url","https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript"
2,3,"link","How to generate hash in JavaScript"
2,3,"note","Transmitting clear-text passwords when users log in is highly risky (even over HTTPS, as it can be intercepted).Therefore Web developers routinely encode sensitive information even on the client’s side."
3,0,"title","Arithmetic Coding for Compression"
3,0,"name","A.V."
3,0,"description","Unlike Lempel-Ziv or Burrows-Wheeler codes (optimal for human language where letter combinations and entire words often repeat), arithmetic coding relies on the probabilities of the messages. It aims to achieve the maximum compression rate possible due to Shannon’s enthropy theorem about the information content. Such codes are called “enthropy codes”. They include Huffman and Arithmetic coding. Arithmetic coding represents each sequence of messages as an interval of real numbers from the interval [0;1]. "
3,1,"url","https://en.wikipedia.org/wiki/Arithmetic_coding"
3,1,"link","Arithmetic coding (Wikipedia)"
3,1,"note","Different letters (also called “messages”) appear with different probabilities. Arithmetic coding uses the fact that it is more efficient to encode frequently occurring things with sending fewer bits. At every time moment the current message sequence is represented as a numeric interval. Whenever a new message arrives, the interval shrinks (if the new message is rare, it shrinks more). At every moment we can restore the sequence of the messages that generated our current interval."
3,2,"url","https://www.cs.cmu.edu/~guyb/realworld/compression.pdf"
3,2,"link","Introduction to Data Compression by G.Blelloch (pp.16-22)"
3,2,"note","How arithmetic coding fits into the larger picture of information compression; Shannon’s theorem on information content is proved. Also a discussion how to deal with the real number arithmetic on actual computers that enjoy integer numbers best."
3,3,"url","https://www.youtube.com/watch?v=cJ_rhZ9DP9k&feature=youtu.be&t=2070"
3,3,"link","Lecture 5 on Enthropy (David MacKay, Cambridge); start video at 34:30."
3,3,"note","How probabilistic models that generate messages behave with respect to arithmetic coding."
3,4,"url","https://pdfs.semanticscholar.org/aa4b/e5c61d003030b96e7d10340db32ea79c3d77.pdf"
3,4,"link","Arithmetic Coding - Theory and Practice by Amir Said (Hewlett-Packard Labs)"
3,4,"note","Theoretical introduction followed by lots and lots of implementation details. This shows how a simple idea (having neat proportions of real-number intervals) does not stay simple in real life."
3,5,"url","https://en.wikipedia.org/wiki/Asymmetric_numeral_systems"
3,5,"link","Asymmetric numeral systems"
3,5,"note","ANS were developed about 2014 by Jarosław (Jarek) Duda at University of Kraków. It can speed up compression that is very similar to arithmetic coding by a factor of 10 or more. Such algorithms have become the basis for compression standards used by ZStandard, Draco 3D and multiple contemporary operating systems."
4,0,"title","String Searching Algorithms"
4,0,"name","R.Z."
4,0,"description","Searching for a substring in a larger string is needed for many uses – text editors, database selects, preventing leaks of sensitive data, genome biology. String search can be implemented in the most obvious way (as two nested loops), but it is usually too slow and inefficient. For this reason there are several improvements. In particular, they involve Knuth-Morris-Pratt (KMP) algorithm that compares strings forwards, but has a fancy “prefix function” showing by how much we can jump. And Boyer Moore (BM) algorithm that compares strings going backwards. In practice there are also many variations of these. "
4,1,"url","https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm"
4,1,"link","Wikipedia: Knuth-Morris-Pratt Algorithm"
4,1,"note","A nice overview of the KMP algorithm with many links."
4,2,"url","http://www.inf.fh-flensburg.de/lang/algorithmen/pattern/bmen.htm"
4,2,"link","Technische Hochschule Flensburg on Boyer-Moore"
4,2,"note","Examples showing the matching process used by Boyer-Moore – useful to understand “mechanics” of matching strings."
4,3,"url","https://web.cs.ucdavis.edu/~gusfield/cs224f11/bnotes.pdf"
4,3,"link","The Boyer-Moore Notes by Gusfield."
4,3,"note","Boyer-Moore Algorithm explained by a Computational Biologist"
4,4,"url","https://www.geeksforgeeks.org/boyer-moore-algorithm-good-suffix-heuristic/"
4,4,"link","What is Good Suffix Rule and Bad Symbol Rule"
4,4,"note","Two “heuristics” used by Boyer-Moore algorithm are explained. Why Boyer-Moore is not very efficient for certain pathological cases, but is mostly very fast."
4,5,"url","https://stackoverflow.com/questions/16085201/when-would-you-use-kmp-over-boyer-moore"
4,5,"link","When to use KMP over BM or vice versa?"
4,5,"note","A practical discussion how to search strings depending on your task. "
5,0,"title","Plagiarism and Data Leak Detection"
5,0,"name","R.M"
5,0,"description","Plagiarism detection is a broader topic than just academic dishonesty. Perhaps, the broadest area of applications is document fingerprinting that tries to protect intellectual property (IP) by detecting every occurrence, when some document is sent out, if it contains a large chunk of some secret file. Plagiarism detection uses local similarity (finding large common substrings between the given text and the corpus of existing texts), lexical similarity (checking word frequencies or other statistics that distinguish style of different authors), and global similarity – all the way up to Machine Learning and text classification using Support Vector Machines and Neural Networks. (It might be too much for a single presentation, but plagiarism is also relevant for the EU Copyright Directive that mandates the use of Upload Filters – it may prevent people from uploading their OWN music and other works just because they have been detected by the plagiarism filter.)"
5,1,"url","https://en.wikipedia.org/wiki/Plagiarism_detection"
5,1,"link","Wikipedia: Plagiarism Detection"
5,1,"note","A reasonable overview of the methods used."
5,2,"url","https://www.dc.fi.udc.es/~barreiro/publications/parapar_barreiro_ecir2009.pdf"
5,2,"link","N-Gram Algorithms"
5,2,"note","N-Grams or sliding windows reads all the protected documents; extracts text; normalizes text (convert everything to lower case, replace punctuation by single spaces); takes a window of, say, 5 consecutive words and computes hash function. If the target document has many 5-word sequences that coincide with existing documents, it is strong evidence that there are common quotes (and these sequences did not occur just by random)."
5,3,"url","https://pdfs.semanticscholar.org/127a/d972f9e3f4199ddbcd15604b2630dbf60547.pdf"
5,3,"link","Using Rabin-Karp Algorithm"
5,3,"note","A very theoretical article on Rabin-Karp (which is originally a string searching algorithm) and its applications for plagiarism."
5,4,"url","https://stackoverflow.com/questions/8437904/rabin-karp-algorithm-for-plagiarism-implementation-by-using-rolling-hash"
5,4,"link","Rabin-Karp implementation"
5,4,"note","Rolling hash (similar to N-Gram idea) is used to compute Rabin-Karp function to do look-ups efficiently."
5,5,"url ","https://github.com/huggingface/transformers/issues/876"
5,5,"link","Finding similar sentences with Bert Service"
5,5,"note","Bert Service is an Artificial Intelligence solution for text classification tasks using Google’s Tensor Flow library. There are some limitations (it needs large training sets to be efficient, and it may also be slow), but there are some suggestions how it can be used to find similar text chunks efficiently. "
5,6,"url ","http://www.dialog-21.ru/media/4642/zubarevdvplussochenkoviv-110.pdf"
5,6,"link","Cross-Language Text Alignment for Plagiarism Detection"
5,6,"note","Plagiarism detection becomes much harder, if translation between languages is allowed. It usually means that the plagiarist takes an existing text, uses a machine translation service, edits the end-result a little bit – and then uses the plagiarized text in another language."
6,0,"title","Creative Strategies in Proofs"
6,0,"name","K.G."
6,0,"description","It turns out that many mathematicians use similar approaches to make their thinking process more creative and productive. It involves techniques of careful reading, imagining the provable goal, working backwards, visualization and more specific techniques. These include all types of “exhaustive search” (or “getting your hands dirty”), balancing your inductive hypotheses with its goal, “thinking globally, acting locally”, “making your life easier” (by replacing your problem with an easier one) and many more. Methods of mathematical creativity are usually discussed in books by authors as divers as Greek philosopher Plato (his dialogue Meno), George Polya, and Paul Zeitz. Many others have also contributed – since creativity is a complex and slightly subjective thing."
6,1,"url ","https://en.wikipedia.org/wiki/Meno"
6,1,"link","Wikipedia: Meno"
6,1,"note","Platonian dialogue on why mathematics knowledge is inborn (and has only to be “recollected”), illustration with a slave boy who solves geometry problem with halving a square. This dialogue has led to “socratic” method in paedagogy, where we carefully assist the students by asking them many “natural” questions. "
6,2,"url ","https://en.wikipedia.org/wiki/Mathematics_and_Plausible_Reasoning"
6,2,"link","Mathematics and Plausible Reasoning (Математика и правдоподобные рассуждения) by George Polya"
6,2,"note","Matching mathematical and logical methods (generalization, specialization, finding examples for simple combinatorics and arithmetics tasks) with everyday experience and problem-solving skills in general."
6,3,"url ","https://en.wikipedia.org/wiki/How_to_Solve_It"
6,3,"link","How to Solve It by George Polya"
6,3,"note","A four-step process to solve very broad range of problems is suggested in this book and illustrated with many examples."
6,4,"url ","https://www.amazon.com/Mathematics-Plausible-Reasoning-Two-Volumes/dp/1614275572/ref=pd_sbs_14_t_0/144-5909338-3429230?_encoding=UTF8&pd_rd_i=1614275572&pd_rd_r=be615136-ca32-422e-986e-e4ba6c28340e&pd_rd_w=7Evju&pd_rd_wg=iBcci&pf_rd_p=5cfcfe89-300f-47d2-b1ad-a4e27203a02a&pf_rd_r=7MWAMB1B3282K8HNKDR9&psc=1&refRID=7MWAMB1B3282K8HNKDR9"
6,4,"link","Mathematical Discovery: On Understanding, Learning and Teaching Problem Solving, 2 volumes"
6,4,"note","A more in-depth mathematical study, which shows unexpected approaches (for example, sometimes it is easier to prove generalizations - i.e. in some sense a “harder” problem (by its formulation) may be easier to solve. Russian translation may be easier to find and to download"
6,5,"url ","https://kheavan.files.wordpress.com/2010/06/paul-zeitz-author-the-art-and-craft-of-problem-solving-2edwiley20060471789011.pdf"
6,5,"link","The Art and Craft of Problem Solving by Paul Zeitz"
6,5,"note","This is a contemporary book to teach mathematical creativity to adults using rather simple examples."
7,0,"title","Bloom Filters"
7,0,"name","A.N."
7,0,"description","Bloom Filters explain how to store huge hashtables in a very limited space. For example, we want to have a huge lookup table (for a plagiarism detection device), but we do not want to transfer gigabytes of information whenever our reference data set changes. Bloom Filters provide an elegant way to compress hashtables by placing them into a “probabilistic” data structure. It is probabilistic, because it can occasionally have “false positives” - it can claim that some element is in the set (even though it is not there). Even Bloom Filters never have “false negatives” - if the data structure says that the string was not found, it is always true. "
7,1,"url ","https://en.wikipedia.org/wiki/Bloom_filter"
7,1,"link","Wikipedia: Bloom Filter"
7,1,"note","The discussion of what a “probabilistic data structure” really is."
7,2,"url ","http://citeseer.ist.psu.edu/viewdoc/download;jsessionid=6CA79DD1A90B3EFD3D62ACE5523B99E7?doi=10.1.1.127.9672&rep=rep1&type=pdf"
7,2,"link","Applications of Bloom Filters by A.Broder and M.Mitzenmacher"
7,2,"note","Networking applications of Bloom Filters and some formulas that estimate the number of mistakes (how frequently false positives happen)"
8,0,"title","Matching regular expressions"
8,0,"name","A.J."
8,0,"description","This presentation has to define what a regular expression is and the problem of searching them. (Regex finding is a feature for all major text editors; for example, Notepad++ or Gedit have this feature.) Regex patterns, their matching with finite state automata
and performance of these matchers, including catastrophic backtracking."
8,1,"url","https://kean.github.io/post/regex-matcher"
8,1,"link","Regex Matcher by Alexander Grebenyuk"
8,1,"note","Discussion and comparison between multiple approaches – all of them use Non-deterministic finite automata (NFA) or Deterministic finite automata (DFA)."
8,2,"url","https://simons.berkeley.edu/talks/arturs-backurs-2015-12-01"
8,2,"link","Which regular expressions are hard to match."
8,2,"note","A technical talk on regular expression matching given by a MIT researcher Artūrs Bačkurs."
8,3,"url","https://www.regular-expressions.info/catastrophic.html"
8,3,"link","Catastrophic Backtracking"
8,3,"note","How a regular expression matching algorithm that normally behaves well, starts to waste lots of resources to find matches of certain regular expressions."
9,0,"title","Four-color theorem"
9,0,"name","B.K."
9,0,"description","Formulate four-color theorem (and similar theorems on Torus and other non-spheric topologies). Show how it can break down to analysis of a large number of cases."
10,0,"title","Alpha-Beta pruning"
10,0,"name","M.C."
10,0,"description","Build and analyze a game-tree for a pen-and-paper that is feasible to analyze on a PC computer. Apply alpha-beta pruning algorithm to have a computer that wins human players."
11,0,"title","Matrix Games"
11,0,"name","J.S."
11,0,"description","Matrix Games can model decision taking in economy and other areas. It describes all the options that players can take; for each pair of choices it computes the outcome of the game, and places them in a big table called “matrix”. Distinguish zero-sum and non-zero-sum games. Show how to find Nash equilibrium; apply it to some simple number guessing games (Rock paper scissors; some variant of a Prisoner's dilemma; simultaneous guessing of positive integers.)"
11,1,"url ","https://mindyourdecisions.com/blog/2015/08/04/the-high-low-guessing-game-with-a-strategic-twist-game-theory-tuesdays/"
11,1,"link","High-Low Guessing Game"
11,1,"note","Variations of a number guessing game (which would otherwise be a boring binary search problem)."
11,2,"url ","https://en.wikipedia.org/wiki/Prisoner%27s_dilemma"
11,2,"link","Wikipedia: Prisoner’s Dilemma"
11,2,"note","How some matrix games (with non-zero-sum outcomes) produce paradoxes, where the global optimum for all players does not match the locally optimal strategy for each isolated player (if the strategies of other players are somehow fixed)."
12,0,"title","Hamiltonian cycles"
12,0,"name","V.J."
12,0,"description","Define Hamiltonian cycles. Formulate theorem by Emanuels Grinbergs – the necessary condition for Hamiltonian cycles in planar graphs.
Define concepts for NP complete problems and decision problems in general. Describe, how all NP-problems can be reduced to Hamiltonian cycles. The concepts of NP complete problems and
<a href="""">decision problems</a>.
How the NP-complete problems can be reduced to/from Hamiltonian cycles."
12,1,"url","https://youtu.be/YX40hbAHx3s"
12,1,"link","NP-Complete problems"
12,1,"note","The Zoo of complexity classes is introduced in a very lively discussion. "
12,2,"url","https://youtu.be/moPtwq_cVH8"
12,2,"link","Decision problems, Sudoku and other applications"
12,2,"note","What are decision problems that analyze complicated tasks into two-answer alternatives (yes or no). "
12,3,"url","https://arxiv.org/pdf/1807.10187.pdf"
12,3,"link","A New Proof of Grinbergs Theorem by Heping Jiang"
12,3,"note","Even though Hamiltonian cycles are hard in the general graphs, they can be detected in one important subcase – when the graph is a planar graph."
13,0,"title","Google Page Rank"
13,0,"name","E.S."
13,0,"description","A discussion how a (directed) graph of Webpage links can indicate, which pages are the most relevant (most often linked by other important pages). This topic can include other computable rankings of search results – including “recommendation problem”, where we have many users, some users have preferences that are well-known; the problem is to find similar users who might prefer the same things. This is used by Google, Netflix and many other service providers when there are thousands of options to choose from, but we want to recommend just the things that are most likely to match the given user’s preferences."
13,1,"url ","https://www.cs.princeton.edu/~chazelle/courses/BIB/pagerank.htm"
13,1,"link","Google Page Rank"
13,1,"note","The page with the initial discussion how a page rank can be computed. "
13,2,"url","https://www.cs.princeton.edu/~chazelle/courses/BIB/pagerank.htm"
13,2,"link","The Google Pagerank Algorithm and How It Works by Ian Rogers"
13,2,"note","Princeton University resource with some bibliography. It explains the theoretical concept, how it can be “cheated”, and what you should do (as a SEO – Search Engine Optimizer) to improve your page rank, getting better search results in Google without clear breaking of Google rules and being punished for dishonest self-promotion."
14,0,"title","Paradoxes of Self-Reference"
14,0,"name","L.R."
14,0,"description","Russel's paradox, diagonalization results, Barber's paradox, Halting problem."
15,0,"title","Arrow’s Theorem"
15,0,"name","I.T."
15,0,"description","Results how voting among shareholders can lead either to a ""dictator"" deciding everything or to the voting process being easy to manipulate. This result is less relevant for national elections (because they do not happen often enough to allow manipulation scenarios described by Arrow), but this is important for shareholder decision making and other business applications where multiple users vote accordingly to their self-interest (but eventually the result of their voting turns out to be harmful to the self interest of the majority – no matter, how the voting procedure is organized). Arrow was awarded Nobel prize for this and other studies of collective decisions; why some naive intuitions about democracy may be wrong."
15,1,"url","https://en.wikipedia.org/wiki/Arrow%27s_impossibility_theorem"
15,1,"link","Wikipedia: Arrow’s Impossibility Theorem"
15,1,"note","Collection of further resources for this result. (For a presentation a simple 2-dimensional case can serve to illustrate the seeming paradox of this theorem.)"
